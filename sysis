#!/usr/bin/env bash

# sysis - Display Key System Information
#   Copyright (C) 2014-2024  Robert Peteuil  @RobertPeteuil
#
#     Lightweight Cross-Platform Utility for:
#         macOS, Linux, and Windows 10 Bash on Windows
#
#    from: https://github.com/robertpeteuil/sysis


scriptname="sysis"
scriptbuildnum="3.8.3"
scriptbuilddate="2024-11-04"

############################################################
### VARS INITS

OS=$(uname -s)
MACHINE_NAME=$(hostname -s)

REPORTTITLE="System Information"
EXITSTATUS=0
EXITMESSAGE=""


############################################################
###     PRE-EXECUTION

# turn on color if possible
if test -t 1; then            # check if stdout is a terminal
  if [ "$TERM" == "xterm-new" ]; then
    TERM="xterm"
  fi
  ncolors=$(tput colors 2>/dev/null)   # check if it supports colors
  if test -n "$ncolors" && test "$ncolors" -ge 8; then
    # Set Colors
    bold="$(tput bold)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    magenta="$(tput setaf 5)"
    cyan="$(tput setaf 6)"
    # shellcheck disable=SC2034
    white="$(tput setaf 7)"
    clrreset="\033[0m"
    # color theme to enable quick color changing
    CLRnormal="${clrreset}"
    CLRdefault="${bold}${clrreset}"
    CLRheading="${bold}${blue}"
    CLRheading2="${clrreset}${green}"
    CLRtitle="${clrreset}${cyan}"
    CLRtitle2="${bold}${magenta}"
    # shellcheck disable=SC2034
    CLRsuccess="${bold}${green}"  
    CLRwarning="${clrreset}${yellow}"
    CLRerror="${bold}${red}"
  fi
fi


######################################################################
#     FUNCTIONS
######################################################################

processExit () {    # error message can be sent to function when calling
  local var="$*"
  if [[ -n "$EXITMESSAGE" ]]; then
    echo -e "$EXITMESSAGE" >&2
  fi
  if [[ -n "$var" ]]; then                    # if error-text was passed
    echo -e "$var" >&2                        #   display it on std-error
    [[ "$EXITSTATUS" == 0 ]] && EXITSTATUS=1  #   set exit-status to at least 1
  fi
  exit $EXITSTATUS
}

processAbort () {  
  # shellcheck disable=SC2317
  local var=$*
  # shellcheck disable=SC2317
  [[ -n $var ]] && EXITMESSAGE="${CLRerror}AZBORT${CLRdefault} - ${var}${CLRnormal}"
  # shellcheck disable=SC2317
  EXITSTATUS=2
  # shellcheck disable=SC2317
  processExit
}

displayVer() {
  echo -en "${CLRheading2}${scriptname}${CLRdefault}  ver ${CLRtitle}${scriptbuildnum} ${CLRdefault}- ${CLRtitle}${scriptbuilddate}${CLRdefault}${CLRnormal}"
}

printHelp() {
  displayVer
  echo -e "\n${CLRdefault}Collect and print information on system, network and OS to standard output.\n"
  echo -e "${CLRtitle}usage: ${CLRdefault}${scriptname} ${CLRtitle2}[OPTIONS] [DEBUG]${CLRdefault}\n"
  echo -e "${CLRtitle}   OPTIONS"
  echo -e "${CLRtitle2}     -e\t${CLRdefault}: extended output"
  echo -e "${CLRtitle2}     -c\t${CLRdefault}: compressed output (no separation)"
  echo -e "${CLRtitle2}     -d\t${CLRdefault}: debug only report"
  echo -e "${CLRtitle2}     -n\t${CLRdefault}: network only report"
  echo -e "${CLRtitle2}     -h\t${CLRdefault}: help"
  echo -e "${CLRtitle2}     -V\t${CLRdefault}: version info"
  echo -e "${CLRtitle2} --help\t${CLRdefault}: detailed help${CLRnormal}"
  if [[ "$1" ]]; then
    echo
    echo -e "${CLRtitle}   DEBUG"
    echo -e "${CLRtitle2}--force\t${CLRdefault}: force report as 'unknown' type"
    echo
    echo -e "${CLRtitle}   EXIT STATUS"
    echo -e "${CLRtitle2}      0   ${CLRdefault}if OK,"
    echo -e "${CLRtitle2}      1   ${CLRdefault}if minor problems (e.g., cannot access subdirectory),"
    echo -e "${CLRtitle2}      2   ${CLRdefault}if serious trouble (e.g., cannot access command-line argument).${CLRnormal}"
  fi
  processExit
}

getCommandTail() {
  while [[ -n $1 ]]; do
    case $1 in
      -c)           compressed="true";;
      -d)           mode="DEBUG";;
      -e)           EXTENDED="TRUE";;
      -n)           mode="NET";;
      -h)           printHelp;;
      -v|-V)           displayVer; echo; processExit;;
      --help)       printHelp FULL;;
      --force)      mode="FORCE";;
      *)            printHelp;;
    esac
    shift
  done
  return 0
}

cleanText() {
    local var=$*
    var="${var%"${var##*[![:space:]]}"}"     # remove leading whitespace
    var="${var#"${var%%[![:space:]]*}"}"     # remove trailing whitespace
    echo -n "$var"
}

cleanCPUname() {
  local tempCPUname=$1
  tempCPUname=${tempCPUname#*': '}           # strip left of ': '
  tempCPUname=${tempCPUname//'(R)'/}         # remove '(R)'
  tempCPUname=${tempCPUname//'(tm)'/}        # remove '(tm)'
  tempCPUname=${tempCPUname//'(TM)'/}        # remove '(TM)'
  tempCPUname=${tempCPUname//' CPU'/}        # remove ' CPU'
  tempCPUname=${tempCPUname//' Processor'/}  # remove ' Processor'
  tempCPUname=${tempCPUname%' @'*}           # remove speed
  tempCPUname=${tempCPUname%' v'*}           # remove version #
  tempCPUname=${tempCPUname%'  '*}           # remove model # that comes after 2 spaces
  tempCPUname=${tempCPUname//' 0'/}          # remove space 0
  tempCPUname=$(cleanText "$tempCPUname")    # remove leading / trailing space
  echo -n "$tempCPUname"
}

cleanVARtext() {
  local unclearVARtext=$1
  unclearVARtext=${unclearVARtext#*':'}      # strip left of ':'
  unclearVARtext=${unclearVARtext%%'.'*}     # strip right of '.'
  unclearVARtext=${unclearVARtext// /}       # remove spaces
  echo -n "$unclearVARtext"
}

getNetwork() {
  if [[ $(which dig 2&> /dev/null) ]]; then
    if [[ $(dig +time=1 +tries=1 +short ns1.google.com 2&> /dev/null) ]]; then
        pubIP=$(dig TXT +time=3 +tries=1 +short o-o.myaddr.l.google.com @ns1.google.com | sed 's/"//g')
    fi
  elif [[ $(curl -V 2> /dev/null) ]]; then
    pubIP=$(curl -s --connect-timeout 2 https://wtfismyip.com/text)
    # pubIP=$(curl -s ipinfo.io/ip)  # ipinfo.io no longer provides consistent results as of Nov 2017
  fi
  if [[ $(ip -4 addr 2> /dev/null) ]]; then  # LANIP via 'ip' if possible
    # TODO: update for changes in new linux releases & distros
    lanINFO=$(ip -d addr | tac | awk 'BEGIN{n=0} /^[^0-9]/ {validIP=0; bridgeIP=0; if ($0 !~ /bridge.forward_delay/ && $0 !~ /bridge_slave/) { do {if ($0 ~ /^[0-9]/) {if(($0 ~ /NO-CARRIER/ || $0 ~ /LOOPBACK/) || ($0 !~ /BROADCAST/)) {validIP=0; bridgeIP=0; break}} if ($0 ~ /link\/ether/) {macadd[n]=$2} else if ($0 ~ /inet / && $0 ~ /scope global/) {ip4add[n]=$2; validIP=1} else if ($0 ~ /inet6/ && $0 ~ /scope global/) {ip6add[n]=$2; validIP=1} else if ($0 ~ /bridge forward/ || $0 ~ /bridge_slave/) {bridgeIP=1} else if ($0 ~ /^[0-9]/) {nname[n]=$2; break} } while (getline ==1)} if (validIP==1 && bridgeIP==0) {n++; validIP=0} else {bridgeIP=0}} END{for (i=n-1; i>=0; i--) {split(ip4add[i], ip4, /\//); split(ip6add[i], ip6, /\//); split(nname[i], adname, ":"); printf "%s n:%s 4:%s 6:%s\n", macadd[i], adname[1], ip4[1], ip6[1]}}')
    lanMAC=$(echo -e "$lanINFO" | cut -d' ' -f1)
    lanNAME=$(echo -e "$lanINFO" | cut -d' ' -f2)
    lanIP=$(echo -e "$lanINFO" | cut -d' ' -f3)
    lanIP6=$(echo -e "$lanINFO" | cut -d' ' -f4)
  elif [[ $(ifconfig -a 2> /dev/null) ]]; then  # else try 'ifconfig'
    case $OS in
      Linux)   # removes virtual adapters named "virbr*" from results
        # awk limited on older systems (no support for [[:alnum:]])
        lanINFO=$(ifconfig -a | awk 'BEGIN{n=0} /^[A-Za-z0-9]/ {if ($1 ~ /^virbr/) {next} else {nname[n]=$1; validIP=0; nicON=0; do {if ($0 ~ /^\s*$/) {break} else if ($0 ~ /UP BROADCAST RUNNING/) {nicON=1} else if ($0 ~ /HWaddr/) {macadd[n]=$5} else if ($0 ~ /cast/ && $0 !~ /cast:0\.0\.0\.0/) {ip4add[n]=$2; validIP=1} else if ($0 ~ /inet6/ && $0 ~ /Scope:Global/) {ip6add[n]=$3; validIP=1} getline} while ($0 !~ /^[A-Za-z0-9]/)} if (validIP==1 && nicON==1) {n++; validIP=0; nicON=0} } END{for (i=0; i<n; i++) {split(ip4add[i], ip4, ":"); split(ip6add[i], ip6, /\//); printf "%s n:%s 4:%s 6:%s\n", macadd[i], nname[i], ip4[2], ip6[1]}}')
        lanMAC=$(echo -e "$lanINFO" | cut -d' ' -f1)
        lanNAME=$(echo -e "$lanINFO" | cut -d' ' -f2)
        lanIP=$(echo -e "$lanINFO" | cut -d' ' -f3)
        lanIP6=$(echo -e "$lanINFO" | cut -d' ' -f4)
        ;;
      Darwin)  # removes virtual adapters named "vnic*" from results
        lanINFO=$(ifconfig -a | /usr/bin/tail -r | awk 'BEGIN{n=0; m=0} /status: active/ {validIP=0; nonVirt=0; {do {if ($0~ /^vnic/) {next} else if ($0 ~ /^[[:alnum:]]/) {split($1, tmpname, ":"); nname[n]=tmpname[1]; nonVirt=1; break} else if ($0 ~ /cast/) {ip4add[n]=$2; validIP=1} else if ($0 ~ /inet6/) {ip6temp[m]=$2; m++} else if ($0 ~ /ether /) {macadd[n]=$2}} while (getline == 1)} {for (i=0; i<m; i++) {if (index(ip6temp[i], nname[n]) ==0) {ip6add[n]=ip6temp[i]; validIP=1} m=0}} if (validIP == 1 && nonVirt == 1) {n++}} END{for (i=n-1; i>=0; i--) {printf "%s n:%s 4:%s 6:%s\n", macadd[i], nname[i], ip4add[i], ip6add[i]}}')
        lanMAC=$(echo -e "$lanINFO" | cut -d' ' -f1)
        lanNAME=$(echo -e "$lanINFO" | cut -d' ' -f2)
        lanIP=$(echo -e "$lanINFO" | cut -d' ' -f3)
        lanIP6=$(echo -e "$lanINFO" | cut -d' ' -f4)
        ;;
      FreeBSD|OpenBSD)
        lanIP=$(ifconfig | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{print $2}')
        ;;
      SunOS)
        lanIP=$(ifconfig -a | grep inet | grep -v '127.0.0.1' | awk '{print $2}')
        ;;
      *)
        lanIP="Unknown"
        ;;
    esac
  fi
  # If all data gathered - lanMAC sets # of connections
  if [[ -n $lanMAC ]]; then
    lancount=0
    for i in $lanMAC; do
      lanMACS[lancount]=$i
      ((++lancount))
    done
  fi
  if [[ -n $lanNAME ]]; then
    count=0
    for i in $lanNAME; do
      lanNAMES[count]=${i#*':'}   # strip off prefix added by awk
      ((++count))
    done
  fi
  # If only IP4 gathered (FreeBSD/OpenBSD/SunOS) - ip4count sets # of connections
  if [[ -n $lanIP ]]; then
    ip4count=0
    for i in $lanIP; do
      lanIPS[ip4count]=${i#*':'}  # strip off prefix added by awk if present
      ((++ip4count))
    done
  fi
  if [[ -n $lanIP6 ]]; then
    count=0
    for i in $lanIP6; do
      lanIP6S[count]=${i#*':'}  # strip off prefix added by awk if present
      ((++count))
    done
  fi
  return 0
}

getSystem() {
  if [[ $(uname 2> /dev/null) ]]; then
    SYSnode=$(uname -n 2> /dev/null)
    SYSkernal=$(uname -s 2> /dev/null)
    SYSkernalVer=$(uname -r 2> /dev/null)
    SYSmachine=$(uname -m 2> /dev/null)
    SYSdevice=$(uname -i 2> /dev/null)
    SYSplatform=$(uname -s | tr '[:upper:]' '[:lower:]' 2> /dev/null)
  else
    processExit "cannot execute ${CLRwarning}'uname'${CLRdefault}"
  fi
  if [[ $(dpkg --help 2> /dev/null) ]]; then
    PROCarch=$(dpkg --print-architecture)
  fi
  if [ -r /etc/os-release ]; then
    VALUESvia="FILE"
    # shellcheck source=/dev/null
    LSBrel="$(. /etc/os-release && echo "$PRETTY_NAME")"
    LSBrel=${LSBrel%' ('*}     # strip right of ' (' to remove codename suffix (if present)
    # shellcheck source=/dev/null
    LSBcodename="$(. /etc/os-release && echo "$VERSION")"
    LSBcodename=${LSBcodename#*', '}
    LSBcodename=${LSBcodename#* (}
    LSBcodename=${LSBcodename%)}
  elif [[ $(lsb_release -h 2> /dev/null) ]]; then
    VALUESvia="LSB"
    LSBidPRE=$(lsb_release -i 2> /dev/null)
    LSBrelPRE=$(lsb_release -r 2> /dev/null)
    LSBcodenamePRE=$(lsb_release -c 2> /dev/null)
    [[ -n $LSBidPRE ]] && LSBid=${LSBidPRE#*":"} && LSBid=$(cleanText "$LSBid")
    [[ -n $LSBrelPRE ]] && LSBrel=${LSBrelPRE#*":"} && LSBrel=$(cleanText "$LSBrel")
    [[ -n $LSBcodenamePRE ]] && LSBcodename=${LSBcodenamePRE#*":"} && LSBcodename=$(cleanText "$LSBcodename")
  fi
  LSBcodename=$(for i in $LSBcodename; do B=$(echo -n "${i:0:1}" | tr "[:lower:]" "[:upper:]")${i:1}; echo -n "${B} "; done)
  LSBcodename=$(cleanText "$LSBcodename")
  return 0
}

setLinuxCommon() {
  if [[ $VALUESvia == "FILE" ]]; then         # plan a - use file
    OSfullname="${LSBrel}"
    [[ -n "$LSBcodename" ]] && OSfullname="${OSfullname}${CLRnormal} ${CLRwarning}(${LSBcodename})${CLRnormal}"
  elif [[ $VALUESvia == "LSB" ]]; then        # plan b - use lsb_release
    OSfullname="${LSBid} ${LSBrel}"
    [[ -n "$LSBcodename" ]] && OSfullname="${OSfullname}${CLRnormal} ${CLRwarning}(${LSBcodename})${CLRnormal}"
  else                                        # plan c - use uname
    OSfullname="${SYSkernal}"
  fi
  if [[ -e "/sys/devices/system/cpu/possible" ]] && [[ $(lscpu -h 2> /dev/null) ]]; then
    if lscpu | grep -q -m1 'max MHz'; then
      CPUspeed=$(lscpu | grep -m1 'max MHz')  # exists on adj. proc
    else
      CPUspeed=$(lscpu | grep -m1 'MHz')
    fi
    CPUspeed=$(cleanVARtext "$CPUspeed")
    CPUspeed=$((CPUspeed + 5))                # add 5 to prevent rounding errors
    CPUspeedBig=$((CPUspeed / 1000))
    CPUspeedSmall=$((CPUspeed % 1000))
    CPUcores=$(lscpu | grep 'Core(s)')
    CPUcores=$(cleanVARtext "$CPUcores")
    CPUinfo="${CPUspeedBig}.${CPUspeedSmall:0:1} GHz ${CLRnormal}${CLRwarning}(${CPUcores} Core)${CLRnormal}"
  fi
  if [[ $(df 2> /dev/null) ]]; then
    DISKuse=$(df -h | awk '$NF=="/"{printf "%d/%d GB", $3,$2}')
    DISKRatio=$(df -h | awk '$NF=="/"{printf "%s\n", $5}')
    DISKusage="${DISKuse} ${CLRnormal}${CLRwarning}(${DISKRatio})${CLRnormal}"
  fi
  return 0
}

setRPI() {
  DeviceType="RPI"
  setLinuxCommon
  if [[ -z "${lanIP}" ]]; then
    lanIP=$(ifconfig | grep -E 'inet.[0-9]' | grep -v '127.0.0.1' | awk '{print $2}')
    if [[ -n $lanIP ]]; then
      ip4count=0
      for i in $lanIP; do
        lanIPS[ip4count]=${i#*':'}  # strip off prefix
        ((++ip4count))
      done
    fi
  fi
  if [ -e "/proc/cpuinfo" ]; then
    RPIrev=$(awk '/Revision/ { sub(/^.+:/, "") ; print $1 }' /proc/cpuinfo)
    CPUname=$(awk '/model name/ { sub(/-compatible/, ""); print ($4)" r"($7); exit}' /proc/cpuinfo)
    # RPI HW version source: http://elinux.org/RPi_HardwareHistory
    case "$RPIrev" in
        *beta) RPImodel="Beta"; RPIman="Beta"; RPIrel="Q1 2012";;
        *002) RPImodel="B [1.0]"; RPIman="unknown"; RPIrel="Q1 2012";;
        *003) RPImodel="B [1.0]"; RPIman="ECN 001"; RPIrel="Q3 2012";;
        *004) RPImodel="B [2.0]"; RPIman="Sony"; RPIrel="Q3 2012";;
        *005) RPImodel="B [2.0]"; RPIman="Qisda"; RPIrel="Q4 2012";;
        *006) RPImodel="B [2.0]"; RPIman="Egoman"; RPIrel="Q4 2012";;
        *007) RPImodel="A [2.0]"; RPIman="Egoman"; RPIrel="Q1 2013";;
        *008) RPImodel="A [2.0]"; RPIman="Sony"; RPIrel="Q1 2013";;
        *009) RPImodel="A [2.0]"; RPIman="Qisda"; RPIrel="Q1 2013";;
        *00d) RPImodel="B [2.0]"; RPIman="Egoman"; RPIrel="Q4 2012";;
        *00e) RPImodel="B [2.0]"; RPIman="Sony"; RPIrel="Q4 2012";;
        *00f) RPImodel="B [2.0]"; RPIman="Qisda"; RPIrel="Q4 2012";;
        *010) RPImodel="B+ [1.0]"; RPIman="Sony"; RPIrel="Q3 2014";;
        *011) RPImodel="Compute Module"; RPIman="Sony"; RPIrel="Q2 2014";;
        *012) RPImodel="A+ [1.0]"; RPIman="Sony"; RPIrel="Q4 2014";;
        *013) RPImodel="B+ [1.2]"; RPIman="Embest"; RPIrel="Q1 2015";;
        *014) RPImodel="Compute Module"; RPIman="Sony"; RPIrel="Q1 2015";;
        *015) RPImodel="A+ [1.0]"; RPIman="Sony"; RPIrel="Q1 2015";;
        *a01040) RPImodel="2B [1.0]"; RPIman="Sony"; RPIrel="Unknown";;
        *a01041) RPImodel="2B [1.1]"; RPIman="Sony"; RPIrel="Q1 2015";;
        *a21041) RPImodel="2B [1.1]"; RPIman="Embest"; RPIrel="Q1 2015";;
        *a22042) RPImodel="2B [1.2]"; RPIman="Embest"; RPIrel="Q3 2016";;
        *900021) RPImodel="A+ [1.1]"; RPIman="Sony"; RPIrel="Q3 2016";;
        *900032) RPImodel="B+ [1.2]"; RPIman="Sony"; RPIrel="Q2 2016";;
        *900092) RPImodel="Zero [1.2]"; RPIman="Sony"; RPIrel="Q4 2015";;
        *900093) RPImodel="Zero [1.3]"; RPIman="Embest"; RPIrel="Q4 2016";;
        *9000c1) RPImodel="Zero W [1.1]"; RPIman="Sony"; RPIrel="Q1 2017";;
        *a02082) RPImodel="3B [1.2]"; RPIman="Sony"; RPIrel="Q1 2016";;
        *a020a0) RPImodel="Compute Module 3"; RPIman="Sony"; RPIrel="Q1 2017";;
        *a22082) RPImodel="3B [1.2]"; RPIman="Embest"; RPIrel="Q1 2016";;
        *a32082) RPImodel="3B [1.2]"; RPIman="Sony"; RPIrel="Q4 2016";;
        *a020d3) RPImodel="3B+ [1.3]"; RPIman="Sony"; RPIrel="Q4 2018";;
        *9020e0) RPImodel="3A+ [1.0]"; RPIman="Sony"; RPIrel="Q4 2018";;
        *a02100) RPImodel="Compute Module 3"; RPIman="Sony"; RPIrel="Q1 2019";;
        *a03111) RPImodel="4B 1G [1.1]"; RPIman="Sony"; RPIrel="Q2 2019";;
        *b03111) RPImodel="4B 2G [1.1]"; RPIman="Sony"; RPIrel="Q2 2019";;
        *b03112) RPImodel="4B 2G [1.2]"; RPIman="Sony"; RPIrel="Q2 2019";;
        *b03114) RPImodel="4B 2G [1.4]"; RPIman="Sony"; RPIrel="Q2 2020";;
        *b03115) RPImodel="4B 2G [1.5]"; RPIman="Sony"; RPIrel="Q1 2022";;
        *c03111) RPImodel="4B 4G [1.1]"; RPIman="Sony"; RPIrel="Q2 2019";;
        *c03112) RPImodel="4B 4G [1.2]"; RPIman="Sony"; RPIrel="Q2 2019";;
        *c03114) RPImodel="4B 4G [1.4]"; RPIman="Sony"; RPIrel="Q2 2020";;
        *c03115) RPImodel="4B 4G [1.5]"; RPIman="Sony"; RPIrel="Q1 2022";;
        *d03114) RPImodel="4B 8G [1.4]"; RPIman="Sony"; RPIrel="Q2 2020";;
        *d03115) RPImodel="4B 8G [1.5]"; RPIman="Sony"; RPIrel="Q1 2022";;
        *902120) RPImodel="Zero 2 W 512M [1.0]"; RPIman="Sony"; RPIrel="Q4 2021";;
        *) RPImodel="'Unknown Version'"; RPIman="Unknown"; RPIrel="Unknown";;
    esac
    if [[ -n ${CPUinfo} ]]; then
      CPUmeta="${CPUname} ${CPUinfo}"  # must be calculated in this if, otherwise vars aren't defined
    else
      CPUmeta="${CPUname}"
    fi
  else   # /proc/cpuinfo not found - cannot lookup model
    RPImodel="'Unknown Version'"
    RPIrel="Unknown"
  fi
  OSkernel=${SYSkernalVer%"-"*}
  HWdevice="Raspberry Pi"
  [[ ${RPImodel} != "'Unknown Version'" ]] && HWdevice="${HWdevice} ${RPImodel}"
  [[ ${RPIrel} != "Unknown" ]] && HWdevice="${HWdevice}${CLRnormal}  ${CLRwarning}(${RPIrel})${CLRnormal}"
  if [[ $(free 2> /dev/null) ]]; then
    MEMuse=$(free -m | awk 'NR==2{printf "%s/%s MB", $3,$2 }')
    MemRatio=$(free -m | awk 'NR==2{printf "%.0f\n", $3*100/$2 }')
    MEMusage="${MEMuse} ${CLRnormal}${CLRwarning}(${MemRatio}%)${CLRnormal}"
    swapUse="$(free -m | awk 'NR==3{printf "%s/%s MB", $3,$2}')"
    if [ "$(free -m | awk 'NR==3{printf "%.0f\n", $2}')" == 0 ]; then
      swapRatio="0"
    else
      # shellcheck disable=SC1083
      swapRatio="$(free -m | awk 'NR==3{printf "%.0f\n", $3*100/$2'})"
    fi 
    swapUsage="${swapUse} ${CLRnormal}${CLRwarning}(${swapRatio}%)${CLRnormal}"
  fi
  return 0
}

setLinux() {
  DeviceType="Linux"
  setLinuxCommon
  OSkernel=${SYSkernalVer%"-"*}
  HWdevice=""
  HWrelease=""
  if [ -e "/proc/cpuinfo" ]; then
    CPUname=$(grep -m1 'model name' < /proc/cpuinfo)
    CPUname=$(cleanCPUname "$CPUname")
  fi
  if [[ -n "$CPUname" ]]; then
    CPUmeta="${CPUname} ${CPUinfo}"
  else
    CPUmeta="${CPUinfo}"
  fi
  if [[ $(free 2> /dev/null) ]]; then
    MEMuse=$(free -m | awk 'NR==2{printf "%s/%s MB", $3,$2 }')
    MemRatio=$(free -m | awk 'NR==2{printf "%.0f\n", $3*100/$2 }')
    MEMusage="${MEMuse} ${CLRnormal}${CLRwarning}(${MemRatio}%)${CLRnormal}"
    swapUse="$(free -m | awk 'NR==3{printf "%s/%s MB", $3,$2}')"
    if [ "$(free -m | awk 'NR==3{printf "%.0f\n", $2}')" == 0 ]; then
      swapRatio="0"
    else
      # shellcheck disable=SC1083
      swapRatio="$(free -m | awk 'NR==3{printf "%.0f\n", $3*100/$2'})"
    fi
    swapUsage="${swapUse} ${CLRnormal}${CLRwarning}(${swapRatio}%)${CLRnormal}"
  fi
  return 0
}

setMac() {
  DeviceType="Mac"
  MacOSinitialVer=${SYSkernalVer%%.*}
  MacOSsubVer=${SYSkernalVer##*.}
  if [ -e /usr/bin/sw_vers ]; then
    MacOSprodVer=$(sw_vers -productVersion)
  else
    MacOSadjustedVer=$((MacOSinitialVer-4))
    MacOSprodVer="10.${MacOSadjustedVer}.${MacOSsubVer}"
  fi
  MacOSver="${MacOSprodVer}"
  case $MacOSprodVer in
    14*) OSname="Sonoma";;
    13*) OSname="Ventura";;
    12*) OSname="Monterey";;
    11*) OSname="Big Sur";;
    10.15*) OSname="Catalina";;
    10.14*) OSname="Mojave";;
    10.13*) OSname="High Sierra";;
    10.12*) OSname="Sierra";;
    10.11*) OSname="El Capitan";;
    10.10*) OSname="Yosemite";;
    10.9*) OSname="Mavericks";;
    10.8*) OSname="Mountain Lion";;
    10.7*) OSname="Lion";;
    10.6*) OSname="Snow Leopard";;
    10.5*) OSname="Leopard";;
    10.4*) OSname="Tiger";;
    10.3*) OSname="Panther";;
    10.2*) OSname="Jaguar";;
    10.1) OSname="Puma";;
    10.0) OSname="Cheetah";;
  esac
  OSfullname="macOS ${MacOSver}${CLRnormal} ${CLRwarning}(${OSname})${CLRnormal}"
  if [[ "$SYSdevice" == "unknown" ]]; then
    # system details: system_profiler SPHardwareDataType
    modelline=$(system_profiler SPHardwareDataType | grep 'Model Name')
    model="${modelline#*: }"
    idline=$(system_profiler SPHardwareDataType | grep 'Identifier')
    modelid="${idline#*: }"
    modelid="${modelid//,/.}"
    HWdevice="${model} (${modelid})"
  else
    HWdevice=${SYSdevice//,/.}
  fi
  HWrelease=""
  CPUname=$(sysctl -n machdep.cpu.brand_string)
  CPUname=$(cleanCPUname "$CPUname")
  CPUspeed=$(sysctl -n hw.cpufrequency_max)
    CPUspeed=$((CPUspeed / 1000000))
  CPUspeedBig=$((CPUspeed / 1000))
  CPUspeedSmall=$((CPUspeed % 1000))
  CPUcores=$(sysctl -n hw.ncpu)
  if [[ "$SYSmachine" == "arm64" ]]; then
    # hide CPU speed on Apple Silicon macs
    CPUinfo="${CLRnormal}${CLRwarning}(${CPUcores} Core)${CLRnormal}"
  else
    CPUinfo="${CPUspeedBig}.${CPUspeedSmall:0:1} GHz ${CLRnormal}${CLRwarning}(${CPUcores} Core)${CLRnormal}"
  fi
  CPUmeta="${CPUname} ${CPUinfo}"
  MEMsizeMB=$(sysctl -n hw.memsize)
    MEMsizeMB=$((MEMsizeMB / (1024 * 1024) ))    # Memory in MB
  #  Memory used = App Use + Wired use + Compressed use
  MEMusedApps=$(vm_stat | grep 'active')
    MEMusedApps=$(cleanVARtext "$MEMusedApps")
    MEMusedApps=$((MEMusedApps / 256))
  MEMusedWired=$(vm_stat | grep 'wired')
    MEMusedWired=$(cleanVARtext "$MEMusedWired")
    MEMusedWired=$((MEMusedWired / 256))
  MEMusedComp=$(vm_stat | grep 'occupied by compressor')
    MEMusedComp=$(cleanVARtext "$MEMusedComp")
    MEMusedComp=$((MEMusedComp / 256))
  MEMused=$((MEMusedApps + MEMusedWired + MEMusedComp))
  MemRatio=$(( (MEMused * 100) / MEMsizeMB))
  printf -v MEMusage "%s/%s MB" ${MEMused} ${MEMsizeMB}
  MEMusage="${MEMusage} ${CLRnormal}${CLRwarning}(${MemRatio}%)${CLRnormal}"
  DISKuse=$(df -h | awk '$NF=="/"{printf "%d/%d GB", $3,$2}')
  DISKRatio=$(df -h | awk '$NF=="/"{printf "%s\n", $5}')
  DISKusage="${DISKuse} ${CLRnormal}${CLRwarning}(${DISKRatio})${CLRnormal}"
  return 0
}

printTitle () {
  displayVer
  echo -en "${CLRdefault}  -  ${REPORTTITLE}"
  case ${mode} in
    DEBUG) echo -en "  ${CLRheading2}(DEBUG)${CLRnormal}";;
    FORCE) echo -en "  ${CLRheading2}(FORCED 'UNKNOWN')${CLRnormal}";;
    NET)   echo -en "  ${CLRheading}(NETWORK)${CLRnormal}";;
    *)     ;;
  esac
  echo -e "\n"
  return 0
}

reportDebug() {
  printTitle
  echo -e "\t${CLRheading}BASH VARS${CLRnormal}"
  echo -e "\t${CLRtitle}HOST = \t\t${CLRdefault}${MACHINE_NAME}${CLRnormal}"
  echo -e "\t${CLRtitle}OS = \t\t${CLRdefault}${OS}${CLRnormal}"
  echo -e "\t${CLRtitle}OS-TYPE =\t${CLRdefault}${OSTYPE}${CLRnormal}${CLRnormal}\n"
  echo -e "\t${CLRheading}UNAME${CLRdefault}${CLRnormal}"
  echo -e "\t${CLRtitle}SYSkernal = \t${CLRdefault}${SYSkernal}${CLRnormal}"
  echo -e "\t${CLRtitle}SYSkernalVer = \t${CLRdefault}${SYSkernalVer}${CLRnormal}"
  echo -e "\t${CLRtitle}SYSmachine = \t${CLRdefault}${SYSmachine}${CLRnormal}"
  echo -e "\t${CLRtitle}SYSdevice = \t${CLRdefault}${SYSdevice}${CLRnormal}\n"
  if [[ "$VALUESvia" == "FILE" ]]; then
    echo -e "\t${CLRheading}/ETC/OS-RELEASE${CLRdefault}${CLRnormal}"
    echo -e "\t${CLRtitle}LSBrel = \t${CLRdefault}${LSBrel}${CLRnormal}"
    echo -e "\t${CLRtitle}LSBcodename = \t${CLRdefault}${LSBcodename}${CLRnormal}\n"
  elif [[ "$VALUESvia" == "LSB" ]]; then
    echo -e "\t${CLRheading}LSB_RELEASE${CLRdefault}${CLRnormal}"
    echo -e "\t${CLRtitle}LSBid = \t${CLRdefault}${LSBid}${CLRnormal}"
    echo -e "\t${CLRtitle}LSBrel = \t${CLRdefault}${LSBrel}${CLRnormal}"
    echo -e "\t${CLRtitle}LSBcodename = \t${CLRdefault}${LSBcodename}${CLRnormal}\n"
  fi
  if [[ "$DeviceType" == "RPI" ]]; then
    echo -e "\t${CLRheading}RPI VARS"
    echo -e "\t${CLRtitle}RPi HW Rev =\t${CLRdefault}${RPIrev}${CLRnormal}"
    echo -e "\t${CLRtitle}RPi Model =\t${CLRdefault}${RPImodel}${CLRnormal}"
    echo -e "\t${CLRtitle}RPi Rel Date =\t${CLRdefault}${RPIrel}${CLRnormal}"
    echo -e "\t${CLRtitle}RPi Manuf =\t${CLRdefault}${RPIman}${CLRnormal}\n"
  elif [[ "$DeviceType" == "Mac" ]]; then
    echo -e "\t${CLRheading}MacOS VARS"
    echo -e "\t${CLRtitle}MacOS Ver = \t${CLRdefault}${MacOSver}${CLRnormal}"
  fi
  return 0
}

reportSysName() {
  echo -e "\t${CLRtitle}Hostname\t${CLRheading2}${MACHINE_NAME}${CLRnormal}"
}

reportNetwork() {
  [[ -n $SYSnode ]] && [[ "$SYSnode" != "$HOSTNAME" ]] && echo -e "\t${CLRheading}NODE\t\t${CLRheading2}${SYSnode}"
  if [[ -n ${lanMAC} ]]; then
    for (( i=0; i<lancount; i=i+1 )); do
      macID="${CLRwarning}(${lanMACS[i]})${CLRnormal}"
      if [[ -n ${lanNAMES[i]} ]]; then
        pad=$(printf '%0.1s' " "{1..15})
        padlength=12
        name="${lanNAMES[i]:0:12}"
        lanTITLE=$(printf '%s IP%*.*s' "${name}" 0 $((padlength - ${#name})) "$pad")
      else
        lanTITLE="LAN IP \t"
      fi
      if [[ -n ${lanIP6S[i]} ]]; then
        lanIP6="${CLRtitle2}[${lanIP6S[i]}]${CLRnormal} "
      else
        lanIP6=""
      fi
      if [[ -n ${lanIPS[i]} ]]; then
        lanIP="${lanIPS[i]} "
      else
        lanIP=""
      fi
      echo -e "\t${CLRtitle}${lanTITLE}\t${CLRdefault}${lanIP}${CLRnormal}${lanIP6}${macID}${CLRnormal}"
    done
  elif [[ $lanIP != "Unknown" ]]; then   # for FreeBSD/OpenBSD/SunOS where full NW details aren't gathered
    for (( i=0; i<ip4count; i=i+1 )); do
      lanIP="${lanIPS[i]}"
      echo -e "\t${CLRtitle}LAN IP \t\t${CLRdefault}${lanIP}${CLRnormal}"
    done
  fi
  [[ -n $pubIP ]] && echo -e "\t${CLRtitle}Internet IP \t${CLRdefault}${pubIP}${CLRnormal}"
  return 0
}

reportSystem() {
  [[ -n $OSfullname ]] && echo -e "\t${CLRtitle}OS\t\t${CLRdefault}${OSfullname}${CLRnormal}"
  [[ -n $HWdevice ]] && echo -e "\t${CLRtitle}Device\t\t${CLRdefault}${HWdevice}${CLRnormal}"
  [[ -n $OSkernel ]] && echo -e "\t${CLRtitle}Kernel\t\t${CLRdefault}${OSkernel}${CLRnormal}"
  if [[ "$EXTENDED" ]]; then
    [[ -n $SYSmachine ]] && echo -e "\t${CLRtitle}Architcture\t${CLRdefault}${SYSmachine}${CLRnormal}"
    [[ -n $SYSmachine ]] && echo -e "\t${CLRtitle}Platform\t${CLRdefault}${SYSplatform}${CLRnormal}"
  fi
  [[ -z $compressed ]] && echo
  reportNetwork
  [[ -z $compressed ]] && echo
  [[ -n $HWrelease ]] && echo -e "\t${CLRtitle}Release Date\t${CLRdefault}${HWrelease}${CLRnormal}"
  [[ -n $CPUmeta ]] && echo -e "\t${CLRtitle}Processor\t${CLRdefault}${CPUmeta}${CLRnormal}"
  [[ -n $MEMusage ]] && echo -e "\t${CLRtitle}Memory Use\t${CLRdefault}${MEMusage}${CLRnormal}"
  [[ -n $swapUsage ]] && echo -e "\t${CLRtitle}Swap Use\t${CLRdefault}${swapUsage}${CLRnormal}"
  [[ -n $DISKusage ]] && echo -e "\t${CLRtitle}Disk Use\t${CLRdefault}${DISKusage}${CLRnormal}"
  return 0
}

reportMain() {
  reportSysName
  if [[ -z "$DeviceType" ]] || [[ "$mode" == "FORCE" ]]; then   # set VARS to most raw form
    OSkernel=${SYSkernalVer}
    CPUname=${SYSmachine}
    [[ "$SYSdevice" != "unknown" ]] && HWdevice=${SYSdevice}
  fi
  reportSystem
  return 0
}


######################################################################
#     EXECUTION STARTS HERE
######################################################################

getCommandTail "$@"

getNetwork
[[ $mode == "NET" ]] && reportSysName && reportNetwork && processExit
getSystem

if [[ "$OS" == "Linux" ]]; then
  if [[ "$PROCarch" == "armhf" ]] || [[ $SYSmachine == armv* ]] || [[ "$OSTYPE" == "linux-gnueabihf" ]]; then
    setRPI                          # Some Linux common extraction + RPi unique
  else
    setLinux                        # Use linux common + linux defaults)
  fi
elif [[ "$OS" == "Darwin" ]]; then  # Mac unique extraction
  setMac
else                                # un-determined host type
  processExit "${CLRerror}Error${CLRdefault}: ${CLRwarning}Could not determine System Type${CLRdefault}"
fi

[[ "$mode" == "DEBUG" ]] && reportDebug && processExit
reportMain

processExit

### SHOULD NEVER RUN CODE BELOW THIS LINE
# shellcheck disable=SC2317
echo "ERROR - exit function didnt work" >&2
# shellcheck disable=SC2317
exit 2
